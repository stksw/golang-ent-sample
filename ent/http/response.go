// Code generated by ent, DO NOT EDIT.

package http

import (
	"ent-sample/ent"
	"ent-sample/ent/todo"
	"ent-sample/ent/user"
	"net/http"
	"strconv"
	"time"

	"github.com/mailru/easyjson"
)

// Basic HTTP Error Response
type ErrResponse struct {
	Code   int         `json:"code"`             // http response status code
	Status string      `json:"status"`           // user-level status message
	Errors interface{} `json:"errors,omitempty"` // application-level error
}

func (e ErrResponse) MarshalToHTTPResponseWriter(w http.ResponseWriter) (int, error) {
	d, err := easyjson.Marshal(e)
	if err != nil {
		return 0, err
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.Header().Set("Content-Length", strconv.Itoa(len(d)))
	w.WriteHeader(e.Code)
	return w.Write(d)
}

func BadRequest(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusBadRequest,
		Status: http.StatusText(http.StatusBadRequest),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Conflict(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusConflict,
		Status: http.StatusText(http.StatusConflict),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Forbidden(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusForbidden,
		Status: http.StatusText(http.StatusForbidden),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func InternalServerError(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusInternalServerError,
		Status: http.StatusText(http.StatusInternalServerError),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func NotFound(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusNotFound,
		Status: http.StatusText(http.StatusNotFound),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

func Unauthorized(w http.ResponseWriter, msg interface{}) (int, error) {
	return ErrResponse{
		Code:   http.StatusUnauthorized,
		Status: http.StatusText(http.StatusUnauthorized),
		Errors: msg,
	}.MarshalToHTTPResponseWriter(w)
}

type (
	// Todo1977301413View represents the data serialized for the following serialization group combinations:
	// []
	Todo1977301413View struct {
		ID        int         `json:"id,omitempty"`
		Text      string      `json:"text,omitempty"`
		CreatedAt time.Time   `json:"created_at,omitempty"`
		Status    todo.Status `json:"status,omitempty"`
		Priority  int         `json:"priority,omitempty"`
	}
	Todo1977301413Views []*Todo1977301413View
)

func NewTodo1977301413View(e *ent.Todo) *Todo1977301413View {
	if e == nil {
		return nil
	}
	return &Todo1977301413View{
		ID:        e.ID,
		Text:      e.Text,
		CreatedAt: e.CreatedAt,
		Status:    e.Status,
		Priority:  e.Priority,
	}
}

func NewTodo1977301413Views(es []*ent.Todo) Todo1977301413Views {
	if len(es) == 0 {
		return nil
	}
	r := make(Todo1977301413Views, len(es))
	for i, e := range es {
		r[i] = NewTodo1977301413View(e)
	}
	return r
}

type (
	// User2774811467View represents the data serialized for the following serialization group combinations:
	// []
	User2774811467View struct {
		ID        int         `json:"id,omitempty"`
		Name      string      `json:"name,omitempty"`
		Email     string      `json:"email,omitempty"`
		Password  string      `json:"password,omitempty"`
		CreatedAt time.Time   `json:"created_at,omitempty"`
		Status    user.Status `json:"status,omitempty"`
	}
	User2774811467Views []*User2774811467View
)

func NewUser2774811467View(e *ent.User) *User2774811467View {
	if e == nil {
		return nil
	}
	return &User2774811467View{
		ID:        e.ID,
		Name:      e.Name,
		Email:     e.Email,
		Password:  e.Password,
		CreatedAt: e.CreatedAt,
		Status:    e.Status,
	}
}

func NewUser2774811467Views(es []*ent.User) User2774811467Views {
	if len(es) == 0 {
		return nil
	}
	r := make(User2774811467Views, len(es))
	for i, e := range es {
		r[i] = NewUser2774811467View(e)
	}
	return r
}
